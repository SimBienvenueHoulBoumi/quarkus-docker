services:
  # Reverse Proxy Traefik
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8090:8080"  # Dashboard Traefik (changed from 8080 to 8090 to avoid conflict)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - kafka_network

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka_network

  # Kafka Brokers
  kafka-1:
    image: apache/kafka:3.9.1
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_MAX_REQUEST_SIZE: 10485760
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 10485760
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka_1_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:19092 --list > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - kafka_network

  kafka-2:
    image: apache/kafka:3.9.1
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "9093:9092"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:9093
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_MAX_REQUEST_SIZE: 10485760
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 10485760
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka_2_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:19092 --list > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - kafka_network

  kafka-3:
    image: apache/kafka:3.9.1
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "9094:9092"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:19092,PLAINTEXT_HOST://localhost:9094
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_MAX_REQUEST_SIZE: 10485760
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 10485760
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
    volumes:
      - kafka_3_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:19092 --list > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - kafka_network

  # Users Service
  users_service:
    build:
      context: ./users_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
    ports:
      - "8081:8081"
    environment:
      HTTP_PORT: 8081
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19092,kafka-3:19092
      SMALLRYE_JWT_VERIFY_ALGORITHM: HS256
      SMALLRYE_JWT_VERIFY_KEY: super-secret-change-me-please-change-me-32-bytes-minimum-length
      SMALLRYE_JWT_VERIFY_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      SMALLRYE_JWT_SIGN_ALGORITHM: HS256
      SMALLRYE_JWT_SIGN_KEY: super-secret-change-me-please-change-me-32-bytes-minimum-length
      SMALLRYE_JWT_SIGN_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users.rule=Host(`192.168.64.33`) && PathPrefix(`/users`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.services.users.loadbalancer.server.port=8081"
    networks:
      kafka_network:
        aliases:
          - users-service

  # Articles Service
  articles_service:
    build:
      context: ./articles_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
    ports:
      - "8082:8082"
    environment:
      HTTP_PORT: 8082
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19092,kafka-3:19092
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.articles.rule=Host(`192.168.64.33`) && PathPrefix(`/articles`)"
      - "traefik.http.routers.articles.entrypoints=web"
      - "traefik.http.services.articles.loadbalancer.server.port=8082"
    networks:
      kafka_network:
        aliases:
          - articles-service

  # Orders Service
  orders_service:
    build:
      context: ./orders_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
      articles_service:
        condition: service_started
    ports:
      - "8083:8083"
    environment:
      HTTP_PORT: 8083
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19092,kafka-3:19092
      ARTICLES_SERVICE_URL: http://articles-service:8082
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orders.rule=Host(`192.168.64.33`) && PathPrefix(`/orders`)"
      - "traefik.http.routers.orders.entrypoints=web"
      - "traefik.http.services.orders.loadbalancer.server.port=8083"
    networks:
      kafka_network:
        aliases:
          - orders-service

  # Notifications Service
  notifications_service:
    build:
      context: ./notifications_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka-1:
        condition: service_started
      kafka-2:
        condition: service_started
      kafka-3:
        condition: service_started
    ports:
      - "8084:8084"
    environment:
      HTTP_PORT: 8084
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19092,kafka-3:19092
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notifications.rule=Host(`192.168.64.33`) && PathPrefix(`/notifications`)"
      - "traefik.http.routers.notifications.entrypoints=web"
      - "traefik.http.services.notifications.loadbalancer.server.port=8084"
    networks:
      kafka_network:
        aliases:
          - notifications-service

  # API Gateway
  api_gateway:
    build:
      context: ./api-gateway
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      users_service:
        condition: service_started
      articles_service:
        condition: service_started
      orders_service:
        condition: service_started
      notifications_service:
        condition: service_started
    ports:
      - "9000:9000"
    environment:
      HTTP_PORT: 9000
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes-minimum-length
      JWT_ISSUER: users-service
      USERS_SERVICE_URL: http://users-service:8081
      ARTICLES_SERVICE_URL: http://articles-service:8082
      ORDERS_SERVICE_URL: http://orders-service:8083
      NOTIFICATIONS_SERVICE_URL: http://notifications-service:8084
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gateway.rule=Host(`192.168.64.33`)"
      - "traefik.http.routers.gateway.entrypoints=web"
      - "traefik.http.routers.gateway.priority=1"
      - "traefik.http.services.gateway.loadbalancer.server.port=9000"
    networks:
      kafka_network:
        aliases:
          - api-gateway

volumes:
  kafka_1_data:
  kafka_2_data:
  kafka_3_data:
  postgres_data:

networks:
  kafka_network:
    driver: bridge
