services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: CONTROLLER://:9093,PLAINTEXT://:19092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:9092
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # Limites de taille des messages (10 MB au lieu de 100 MB par défaut pour éviter les abus)
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10485760
      KAFKA_MAX_REQUEST_SIZE: 10485760
      # Socket buffer sizes
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 10485760
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 20s

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  users_service:
    build:
      context: ./users_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HTTP_PORT: 8081
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes
      JWT_ISSUER: users-service
      JWT_EXPIRATION_MINUTES: 30
    ports:
      - "8081:8081"

  articles_service:
    build:
      context: ./articles_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      HTTP_PORT: 8082
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka:19092
    ports:
      - "8082:8082"

  orders_service:
    build:
      context: ./orders_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      articles_service:
        condition: service_started
    environment:
      HTTP_PORT: 8083
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka:19092
      ARTICLES_SERVICE_URL: http://articles_service:8082
    ports:
      - "8083:8083"

  notifications_service:
    build:
      context: ./notifications_service
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      HTTP_PORT: 8084
      DB_JDBC_URL: jdbc:postgresql://postgres:5432/appdb
      DB_USER: appuser
      DB_PASSWORD: apppassword
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes
      JWT_ISSUER: users-service
      KAFKA_BOOTSTRAP_SERVERS: kafka:19092
    ports:
      - "8084:8084"

  api_gateway:
    build:
      context: ./api-gateway
      dockerfile: src/main/docker/Dockerfile.jvm
    depends_on:
      users_service:
        condition: service_started
      articles_service:
        condition: service_started
      orders_service:
        condition: service_started
      notifications_service:
        condition: service_started
    environment:
      HTTP_PORT: 9000
      JWT_SECRET: super-secret-change-me-please-change-me-32-bytes
      JWT_ISSUER: users-service
      USERS_SERVICE_URL: http://users_service:8081
      ARTICLES_SERVICE_URL: http://articles_service:8082
      ORDERS_SERVICE_URL: http://orders_service:8083
      NOTIFICATIONS_SERVICE_URL: http://notifications_service:8084
    ports:
      - "9000:9000"

volumes:
  kafka_data:
  postgres_data:
